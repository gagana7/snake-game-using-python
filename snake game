echo "# snake-game-using-python" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/gagana7/snake-game-using-python.git
git push -u origin main

import turtle
import time
import random

delay = 0.1
score = 0
high_score = 0
# Creating a window screen
wn = turtle.Screen()
wn.title("Snake Game")
#turtle.bgpic('maze1.gif')
wn.bgcolor("black")

# the width and height can be put as user's choice
wn.setup(width=600, height=600)
wn.tracer(0)


# head of the snake
head = turtle.Turtle()
head.shape("square")
head.color("brown")
head.penup()
head.goto(0, 0)
head.direction = "Stop"


# food in the game
food = turtle.Turtle()
colors = random.choice(['yellow', 'lightgreen', 'white'])
shapes = random.choice(['square', 'triangle', 'circle'])
food.speed(0)
food.shape(shapes)
food.color(colors)
food.penup()
food.goto(0, 100)

#obstacle in the game
obstacle = turtle.Turtle()
colors1 = random.choice(['darkgreen', 'red', 'darkred'])
shapes1 = random.choice(['turtle'])
obstacle.speed(0)
obstacle.shape(shapes1)
obstacle.color(colors1)
obstacle.turtlesize(2)
obstacle.penup()
obstacle.goto(0,134)


pen = turtle.Turtle()
pen.speed(0)
pen.shape("square")
pen.color("white")
pen.penup()
pen.hideturtle()
pen.goto(0, 250)
pen.write("Score : 0 High Score : 0", align="center",
		font=("candara", 24, "bold"))
# assigning key directions
def goup():
	 #if head.direction != "down":
		head.direction = "up"


def godown():
	#if head.direction != "up":
		head.direction = "down"


def goleft():
	#if head.direction != "right":
		head.direction = "left"


def goright():
	#if head.direction != "left":
		head.direction = "right"

def goupright():
	#if head.direction != "upleft":
		head.direction = "upright"
def goupleft():
	#if head.direction != "upright":
		head.direction = "upleft"
def godownright():
	#if head.direction != "downleft":
		head.direction = "downright"
def godownleft():
	#if head.direction != "downright":
		head.direction = "downleft"



def move():
	if head.direction == "up":
		y = head.ycor()
		head.sety(y+20)
	if head.direction == "down":
		y = head.ycor()
		head.sety(y-20)
	if head.direction == "left":
		x = head.xcor()
		head.setx(x-20)
	if head.direction == "right":
		x = head.xcor()
		head.setx(x+20)
	if head.direction == "upright":
		x = head.xcor()
		head.setx(x+20)
		y = head.ycor()
		head.sety(y+20)
		x = head.xcor()
		head.setx(x+20)
	if head.direction == "upleft":
		x = head.xcor()
		head.setx(x-20)
		y = head.ycor()
		head.sety(y+20)
		x = head.xcor()
		head.setx(x-20)
	if head.direction == "downleft":
		y = head.ycor()
		head.sety(y-20)
		x = head.xcor()
		head.setx(x-20)
		y = head.ycor()
		head.sety(y-20)

	if head.direction == "downright":
		y = head.ycor()
		head.sety(y-20)
		x = head.xcor()
		head.setx(x+20)
		y = head.ycor()
		head.sety(y-20)

    


#keyboard bindings
wn.listen()
wn.onkeypress(goup, "w")
wn.onkeypress(godown, "s")
wn.onkeypress(goleft, "a")
wn.onkeypress(goright, "d")
wn.onkeypress(goupright, "e")
wn.onkeypress(goupleft, "q")
wn.onkeypress(godownright, "c")
wn.onkeypress(godownleft, "z")
segments = []

# Main Gameplay
while True:
	wn.update()
	#if head.xcor() > 290 or head.xcor() < -290 or head.ycor() > 290 or head.ycor() < -290:
	if head.xcor() > 290:
		time.sleep(1)
		head.goto(-290, 0)
	if head.xcor() < -290:
		time.sleep(1)
		head.goto(290, 0)
	if head.ycor() < -290:
		time.sleep(1)
		head.goto(0, 290)
	if head.ycor() > 290:
		time.sleep(1)
		head.goto(0, -290)
	if head.distance(obstacle) <20:
		head.direction = "Stop"
		colors = random.choice(['red', 'blue', 'green'])
		shapes = random.choice(['square', 'circle'])
		for segment in segments:
			segment.goto(1000, 1000)
		segments.clear()
		head.goto(0,0)
		x=random.randint(-127,127)
		y=random.randint(-127,127)
		obstacle.goto(x,y)
		score = 0
		delay = 0.1
		pen.clear()
		pen.write("Score : {} High Score : {} ".format(
			score, high_score), align="center", font=("candara", 24, "bold"))

   
	if (head.distance(food) < 20) |  (head.distance(food) < 10):
		x = random.randint(-270, 270)
		y = random.randint(-270, 270)
		food.goto(x, y)

		# Adding segment
		new_segment = turtle.Turtle()
		new_segment.speed(0)
		new_segment.shape("square")
		new_segment.color("orange") # tail colour
		new_segment.penup()
		segments.append(new_segment)
		delay -= 0.001
		score += 10
		if score > high_score:
			high_score = score
		pen.clear()
		pen.write("Score : {} High Score : {} ".format(
			score, high_score), align="center", font=("candara", 24, "bold"))

    

	# Checking for head collisions with body segments
	for index in range(len(segments)-1, 0, -1):
		x = segments[index-1].xcor()
		y = segments[index-1].ycor()
		segments[index].goto(x, y)
	if len(segments) > 0:
		x = head.xcor()
		y = head.ycor()
		segments[0].goto(x, y)
	move()
	for segment in segments:
		if segment.distance(head) < 20:
			time.sleep(1)
			head.goto(0, 0)
			head.direction = "stop"
			colors = random.choice(['red', 'blue', 'green'])
			shapes = random.choice(['square', 'circle'])
			for segment in segments:
				segment.goto(1000, 1000)
			segment.clear()

			score = 0
			delay = 0.1
			pen.clear()
			pen.write("Score : {} High Score : {} ".format(
				score, high_score), align="center", font=("candara", 24, "bold"))
	time.sleep(delay)


wn.mainloop()
